% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prepost_estimation_helpers.R
\name{ebp_report_byrank}
\alias{ebp_report_byrank}
\title{Produce EBP Head Count Population/Rate by Rank}
\usage{
ebp_report_byrank(
  ebp_object,
  pop_data,
  pop_domains,
  pop_weights,
  byrank_indicator = "count",
  number_to_list = NULL,
  head = TRUE
)
}
\arguments{
\item{ebp_object}{the EBP object produced from by EMDI from unit model estimation
the object is of class "ebp emdi"}

\item{pop_data}{the population/census/training data}

\item{pop_domains}{the target area variable within `pop_data`}

\item{pop_weights}{the population weight variable in the census}

\item{byrank_indicator}{if argument is "count", the function ranks the product
of Head_Count (from object of class `ebp`) and `pop_weights`, otherwise it
the function simply ranks Head_Count output within `ebp` object}

\item{number_to_list}{an integer, the first `number_to_list` number of
target areas to produce from `byrank_indicator` ordering.}

\item{head}{a logical, if `TRUE` the top `number_to_list` results will be returned
and if `FALSE` the bottom `number_to_list` will be returned}

\item{pop_domnames}{the population domain names}
}
\description{
This function combines the ebp object with the census data to produce report
tables that rank head count estimates either by population of poor or the
head count rates themselves in descending order. The function allows the user
to select the first/last "x" number of areas by name as well.
}
\examples{
data("eusilcA_pop")
data("eusilcA_smp")

#### set of variables used in model estimation
variables <- c("gender", "eqsize", "cash", "self_empl",
              "unempl_ben", "age_ben", "surv_ben",
              "sick_ben", "dis_ben", "rent", "fam_allow",
              "house_allow", "cap_inv", "tax_adj")

### estimate a unit model
emdi_model <- emdiplus::ebp(fixed = as.formula(paste("eqIncome ~ ", paste(variables, 
                                                                         collapse= "+"))),
                           pop_data = eusilcA_pop2, 
                           pop_domains = "district", 
                           smp_data = eusilcA_smp2, 
                           smp_domains = "district",
                           na.rm = TRUE,
                           weights = "weight",
                           pop_weights = "popweights",
                           MSE = TRUE,
                           threshold = 11000,
                           B = 2,
                           L = 2)
                           
### full data of highest population below threshold by rank (descending order)
ebp_report_byrank(ebp_object = emdi_model,
                 pop_data = eusilcA_pop2,
                 pop_domnames = "district",
                 pop_weights = "popweights")

### full data of highest rate below threshold by rank (descending order)                   
ebp_report_byrank(ebp_object = emdi_model,
                 pop_data = eusilcA_pop2, 
                 pop_domains = "district",
                 pop_weights = "popweights",
                 byrank_indicator = "rate")

### bottom 10 poverty count below threshold by rank (in ascending order)                  
ebp_report_byrank(ebp_object = emdi_model,
                 pop_data = eusilcA_pop2,
                 pop_domains = "district",
                 pop_weights = "popweights",
                 number_to_list = 10,
                 head = FALSE)
                   
                                   

}
